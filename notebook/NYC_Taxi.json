{
	"name": "NYC_Taxi",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "NYC",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b8458bee-87d5-4cda-8935-18031899529f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/0e625678-0cbd-4bef-862f-a671f2c87478/resourceGroups/vasanth_rg/providers/Microsoft.Synapse/workspaces/jcssynapseanalytics/bigDataPools/NYC",
				"name": "NYC",
				"type": "Spark",
				"endpoint": "https://jcssynapseanalytics.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/NYC",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"yellow_taxi = spark.read.format(\"parquet\").option(\"Header\",True).load(\"abfss://raw@jcsdlgen2.dfs.core.windows.net/yellow_tripdata_2023-01.parquet\")\r\n",
					"green_taxi = spark.read.format(\"parquet\").option(\"Header\",True).load(\"abfss://raw@jcsdlgen2.dfs.core.windows.net/green_tripdata_2023-01.parquet\")\r\n",
					"fhv_taxi = spark.read.format(\"parquet\").option(\"Header\",True).load(\"abfss://raw@jcsdlgen2.dfs.core.windows.net/fhv_tripdata_2023-01.parquet\")\r\n",
					"fhvhv_taxi = spark.read.format(\"parquet\").option(\"Header\",True).load(\"abfss://raw@jcsdlgen2.dfs.core.windows.net/fhvhv_tripdata_2023-01.parquet\")\r\n",
					"taxi_zone = spark.read.format(\"csv\").option(\"Header\",True).load(\"abfss://raw@jcsdlgen2.dfs.core.windows.net/taxi+_zone_lookup.csv\")"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"data=[(1,'Standard Rate'),(2,'JFK'),(3,'Newark'),(4,'Nassau or Westchester'),(5,'Negotiated Fare'),(6,'Group Rate')]\r\n",
					"column=[\"RateCode_ID\",\"Type\"]\r\n",
					"RateCode=spark.createDataFrame(data=data,schema=column)\r\n",
					"display(RateCode)"
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"data1=[(1,'Creative Mobile Technologies, LLC'),(2,'VeriFone Inc')]\r\n",
					"column1=[\"Vendor_ID\",\"TPEP Provider\"]\r\n",
					"TPEP_Provider=spark.createDataFrame(data=data1,schema=column1)\r\n",
					"display(TPEP_Provider)"
				],
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"data2=[(1,'Credit Card'),(2,'Cash'),(3,'No Charge'),(4,'Dispute'),(5,'Unknown'),(6,'Voides Trip')]\r\n",
					"column2=[\"Payment_no\",\"Payment_Type\"]\r\n",
					"Payment=spark.createDataFrame(data=data2,schema=column2)\r\n",
					"display(Payment)"
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"data3=[('HV0002','Juno'),('HV0003','Uber'),('HV0004','Via'),('HV0005','Lyft')]\r\n",
					"column3=[\"HVFHS License Number\",\"provider\"]\r\n",
					"HVFHS_Provider=spark.createDataFrame(data=data3,schema=column3)\r\n",
					"display(HVFHS_Provider)"
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"data4=[(1,\"Shared\"),(2,'Non-Shared')]\r\n",
					"column4=[\"SR_Flag\",\"Type\"]\r\n",
					"Shared_Notshared=spark.createDataFrame(data=data4,schema=column4)\r\n",
					"display(Shared_Notshared)"
				],
				"execution_count": 61
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"fhv_taxi = fhv_taxi.fillna(2, subset=['SR_flag'])\r\n",
					"display(fhv_taxi)"
				],
				"execution_count": 62
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"data5=[(1,'Street-Hail'),(2,'Dispatch')]\r\n",
					"column5=[\"Number\",\"Type\"]\r\n",
					"Trip_Type=spark.createDataFrame(data=data5,schema=column5)\r\n",
					"display(Trip_Type)"
				],
				"execution_count": 63
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"yellow_taxi=yellow_taxi.select(\"VendorID\",\"tpep_pickup_datetime\",\"tpep_dropoff_datetime\",\"passenger_count\",\"trip_distance\",\"RatecodeID\",\"PULocationID\",\"DOLocationID\",\"payment_type\",\"fare_amount\",\"extra\",\"tip_amount\",\"tolls_amount\",\"total_amount\",\"congestion_surcharge\",\"airport_fee\")"
				],
				"execution_count": 64
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"green_taxi=green_taxi.select(\"VendorID\",\"lpep_pickup_datetime\",\"lpep_dropoff_datetime\",\"passenger_count\",\"trip_distance\",\"RatecodeID\",\"PULocationID\",\"DOLocationID\",\"payment_type\",\"ehail_fee\",\"fare_amount\",\"extra\",\"tip_amount\",\"tolls_amount\",\"total_amount\",\"congestion_surcharge\",\"trip_type\")"
				],
				"execution_count": 65
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import col\r\n",
					"from pyspark.sql.types import IntegerType\r\n",
					"yellow_taxi=yellow_taxi.withColumn(\"VendorID\",col(\"VendorID\").cast(IntegerType()))\\\r\n",
					".withColumn(\"payment_type\",col(\"payment_type\").cast(IntegerType()))\\\r\n",
					".withColumn(\"passenger_count\",col(\"passenger_count\").cast(IntegerType()))\\\r\n",
					".withColumn(\"RatecodeID\",col(\"RatecodeID\").cast(IntegerType()))\\\r\n",
					".withColumn(\"PULocationID\",col(\"PULocationID\").cast(IntegerType()))\\\r\n",
					".withColumn(\"DOLocationID\",col(\"DOLocationID\").cast(IntegerType()))\r\n",
					"yellow_taxi.printSchema()"
				],
				"execution_count": 66
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"green_taxi=green_taxi.withColumn(\"VendorID\",col(\"VendorID\").cast(IntegerType()))\\\r\n",
					".withColumn(\"payment_type\",col(\"payment_type\").cast(IntegerType()))\\\r\n",
					".withColumn(\"passenger_count\",col(\"passenger_count\").cast(IntegerType()))\\\r\n",
					".withColumn(\"RatecodeID\",col(\"RatecodeID\").cast(IntegerType()))\\\r\n",
					".withColumn(\"PULocationID\",col(\"PULocationID\").cast(IntegerType()))\\\r\n",
					".withColumn(\"DOLocationID\",col(\"DOLocationID\").cast(IntegerType()))\\\r\n",
					".withColumn(\"trip_type\",col(\"trip_type\").cast(IntegerType()))\r\n",
					"green_taxi.printSchema()"
				],
				"execution_count": 67
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"taxi_zone=taxi_zone.withColumn(\"LocationID\",col(\"LocationID\").cast(IntegerType()))\r\n",
					"taxi_zone.printSchema()"
				],
				"execution_count": 68
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"fhv_taxi=fhv_taxi.withColumn(\"PULocationID\",col(\"PULocationID\").cast(IntegerType()))\\\r\n",
					".withColumn(\"DOLocationID\",col(\"DOLocationID\").cast(IntegerType()))\r\n",
					"fhv_taxi.printSchema()"
				],
				"execution_count": 69
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"fhvhv_taxi=fhvhv_taxi.withColumn(\"PULocationID\",col(\"PULocationID\").cast(IntegerType()))\\\r\n",
					".withColumn(\"DOLocationID\",col(\"DOLocationID\").cast(IntegerType()))"
				],
				"execution_count": 70
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"fhvhv_taxi=fhvhv_taxi.select(\"hvfhs_license_num\",\"dispatching_base_num\",\"originating_base_num\",\"request_datetime\",\"on_scene_datetime\",\"pickup_datetime\",\"dropoff_datetime\",\"PULocationID\",\"DOLocationID\",\"trip_miles\",\"trip_time\",\"base_passenger_fare\",\"tolls\",\"bcf\",\"sales_tax\",\"congestion_surcharge\",\"airport_fee\",\"tips\",\"driver_pay\")\r\n",
					"fhvhv_taxi.printSchema()"
				],
				"execution_count": 71
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"green_taxi=green_taxi.drop(\"ehail_fee\")\r\n",
					"green_taxi.printSchema()"
				],
				"execution_count": 72
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.functions import explode, expr\r\n",
					"\r\n",
					"# Assuming Spark session is already initialized in Azure Synapse environment\r\n",
					"# spark = SparkSession.builder.appName(\"Detailed Timestamps\").getOrCreate()\r\n",
					"\r\n",
					"# Generate a DataFrame for a single day with all hours, minutes, and seconds\r\n",
					"# Note: Adjust the range accordingly if you decide to extend this to more days\r\n",
					"date_lookup = spark.sql(\"\"\"\r\n",
					"SELECT explode(sequence(\r\n",
					"    to_timestamp('2024-01-01 00:00:00'), \r\n",
					"    to_timestamp('2024-01-01 23:59:59'), \r\n",
					"    interval 1 second\r\n",
					")) as timestamp\r\n",
					"\"\"\")\r\n",
					"date_lookup=date_lookup.withColumnRenamed(\"timestamp\",\"date and time\")\r\n",
					"# Show some of the DataFrame to verify - displaying all would be impractical\r\n",
					"display(date_lookup)\r\n",
					"date_lookup.count()  # Should show 86,400 for a single day\r\n",
					"\r\n",
					"# For an entire month, you'd theoretically repeat or adjust the range, but be cautious of performance and practicality\r\n",
					""
				],
				"execution_count": 101
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql.types import DecimalType\r\n",
					"from pyspark.sql.functions import round\r\n",
					"fhvhv_taxi=fhvhv_taxi.drop(\"dispatching_base_num\",\"originating_base_num\",\"on_scene_datetime\")\r\n",
					"fhvhv_taxi=fhvhv_taxi.withColumn(\"trip_time\",col(\"trip_time\")/60)\r\n",
					"display(fhvhv_taxi)\r\n",
					"fhvhv_taxi.printSchema()"
				],
				"execution_count": 74
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"fhv_taxi=fhv_taxi.drop(\"dispatching_base_num\",\"Affilkiated_base_number\")\r\n",
					"display(fhv_taxi)\r\n",
					"fhv_taxi.printSchema()"
				],
				"execution_count": 75
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"yellow_taxi.write.format(\"delta\").save(\"abfss://refined@jcsdlgen2.dfs.core.windows.net/Yellow_Taxi\")\r\n",
					"green_taxi.write.format(\"delta\").save(\"abfss://refined@jcsdlgen2.dfs.core.windows.net/Green_Taxi\")\r\n",
					"fhv_taxi.write.format(\"delta\").save(\"abfss://refined@jcsdlgen2.dfs.core.windows.net/FHV_Taxi\")\r\n",
					"fhvhv_taxi.write.format(\"delta\").save(\"abfss://refined@jcsdlgen2.dfs.core.windows.net/FHVHV_Taxi\")\r\n",
					"taxi_zone.write.format(\"delta\").save(\"abfss://refined@jcsdlgen2.dfs.core.windows.net/Taxi_Zone\")"
				],
				"execution_count": 82
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"RateCode.write.format(\"delta\").save(\"abfss://refined@jcsdlgen2.dfs.core.windows.net/RateCode\")\r\n",
					"Payment.write.format(\"delta\").save(\"abfss://refined@jcsdlgen2.dfs.core.windows.net/Payment\")\r\n",
					"Shared_Notshared.write.format(\"delta\").save(\"abfss://refined@jcsdlgen2.dfs.core.windows.net/Shared or Not-Shared\")\r\n",
					"Trip_Type.write.format(\"delta\").save(\"abfss://refined@jcsdlgen2.dfs.core.windows.net/Trip_Type\")"
				],
				"execution_count": 83
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TPEP_Provider.write.format(\"delta\").save(\"abfss://refined@jcsdlgen2.dfs.core.windows.net/TPEP_Provider\")"
				],
				"execution_count": 84
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"date_lookup=date_lookup.withColumnRenamed(\"date and time\",\"date_and_time\")\r\n",
					"date_lookup.write.format(\"delta\").save(\"abfss://refined@jcsdlgen2.dfs.core.windows.net/Date_Lookup\")\r\n",
					""
				],
				"execution_count": 106
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"HVFHS_Provider.write.format(\"delta\").save(\"abfss://refined@jcsdlgen2.dfs.core.windows.net/HVFHS_Provider\")"
				],
				"execution_count": 86
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"TPEP_Provider=TPEP_Provider.withColumnRenamed(\"TPEP Provider\",\"TPEP_Provider\")\r\n",
					"HVFHS_Provider=HVFHS_Provider.withColumnRenamed(\"HVFHS License Number\",\"HVFHS_License_Number\")\r\n",
					"date_lookup=date_lookup.withColumnRenamed(\"date and time\",\"date_and_time\")"
				],
				"execution_count": 103
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"date_lookup=date_lookup.withColumn(\"date\",to_date(\"date and time\"))\r\n",
					"date_lookup.printSchema()"
				],
				"execution_count": 80
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"yellow_taxi=yellow_taxi.withColumn(\"date\",to_date(\"tpep_pickup_datetime\"))\r\n",
					"green_taxi=green_taxi.withColumn(\"date\",to_date(\"lpep_pickup_datetime\"))\r\n",
					"fhv_taxi=fhv_taxi.withColumn(\"date\",to_date(\"pickup_datetime\"))\r\n",
					"fhvhv_taxi=fhvhv_taxi.withColumn(\"date\",to_date(\"pickup_datetime\"))"
				],
				"execution_count": 76
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql import functions as F\r\n",
					"\r\n",
					"# Create a Spark session\r\n",
					"spark = SparkSession.builder.appName(\"Jan2023Dates\").getOrCreate()\r\n",
					"\r\n",
					"# Define the start and end dates for January 2024\r\n",
					"start_date = \"2023-01-01\"\r\n",
					"end_date = \"2023-01-31\"\r\n",
					"\r\n",
					"# Create a DataFrame with a single row\r\n",
					"single_row_df = spark.createDataFrame([(1,)], [\"dummy\"])\r\n",
					"\r\n",
					"# Use explode to generate dates for January 2024\r\n",
					"jan_2023_dates_df = single_row_df.selectExpr(f\"explode(sequence(to_date('{start_date}'), to_date('{end_date}'), interval 1 day)) AS Date\")\r\n",
					"\r\n",
					"# Show the DataFrame\r\n",
					"jan_2023_dates_df.show(truncate=False)\r\n",
					"jan_2023_dates_df.write.format(\"delta\").save(\"abfss://refined@jcsdlgen2.dfs.core.windows.net/Date\")\r\n",
					""
				],
				"execution_count": 99
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}